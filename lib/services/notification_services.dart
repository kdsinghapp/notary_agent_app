import 'dart:convert';
import 'dart:developer';
import 'dart:io';

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:http/http.dart' as http;
import 'package:notary_agent_app/apis/GlobalVariables.dart';
import 'package:notary_agent_app/import.dart';
import 'package:notary_agent_app/screens/auth/welcome.dart';



import '../main.dart';

class NotificationServices {
  static NotificationServices? _instance;

  NotificationServices._();

  static NotificationServices instance() {
    _instance ??= NotificationServices._();
    return _instance!;
  }

  //................................. requests cloud messaging permission and check status...................................//
  Future<void> requestPermission() async {
    NotificationSettings settings = await FirebaseMessaging.instance
        .requestPermission(
            alert: true,
            announcement: false,
            badge: true,
            carPlay: false,
            criticalAlert: false,
            provisional: false,
            sound: false);
    if (settings.authorizationStatus == AuthorizationStatus.authorized) {
      log('User granted permission');
      // if permission is granted then get token
    } else if (settings.authorizationStatus ==
        AuthorizationStatus.provisional) {
      log('User granted provisional permission');
    } else {
      log('User declined permission');
    }
  }

  //.................................device token is generated by firebase messaging...........................................//
  Future<String?> getToken() async {
    String? deviceToken;
    await FirebaseMessaging.instance.getToken().then((token) async {
      log('my device token : $token');
      deviceToken = token;
    });
  //  updateToken(deviceToken.toString());

    return deviceToken;
  }

  void initializeNotificationServices() {
    FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
        FlutterLocalNotificationsPlugin();
    // Initialize Notification details
    NotificationDetails getNotificationDetails(String? title, String? body) {
      BigTextStyleInformation bigTextStyleInformation = BigTextStyleInformation(
          body ?? 'No body',
          htmlFormatBigText: false,
          contentTitle: title,
          htmlFormatContentTitle: false);
      AndroidNotificationDetails androidNotificationDetails =
          AndroidNotificationDetails('testapp', 'testapp',
              importance: Importance.high,
              //  styleInformation: bigTextStyleInformation,
              icon: 'ic_launcher_round',
              priority: Priority.high,
              playSound: true);
      NotificationDetails notificationDetails = NotificationDetails(
          android: androidNotificationDetails,
          iOS: const DarwinNotificationDetails(
              presentList: true,
              presentBanner: true,
              presentBadge: true,
              presentAlert: true,
              presentSound: true));
      return notificationDetails;
    }

    DarwinInitializationSettings darwinInitializationSettings =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
      onDidReceiveLocalNotification:
          (int id, String? title, String? body, String? payload) async {
        await flutterLocalNotificationsPlugin.show(
          id,
          title,
          body,
          getNotificationDetails(title, body),
          payload: payload,
        );
      },
    );
    InitializationSettings initializationSettings = InitializationSettings(
        iOS: darwinInitializationSettings);
    flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (details) {
        // handle on notification tap event when notification is on foreground
        log('..........foreground notification tapped..................');
        Navigator.push(
            MyGlobalKeys.navigatorKey.currentState!.context,
            MaterialPageRoute(
              builder: (context) => const WelcomeScreen(),
            ));
      },
    );
    FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
      log('.......................Foreground Notification Received.......................');
      log('onMessage ${message.notification?.title}/${message.notification?.body}');
      log('onMessage ${message.data}');
      log('onMessage ${message.data['message']}');
      log('onMessage ${message.data['message'].toString()}');

      // Only android needs this code to show foreground notification.
      // Apple servers handles it by their own.
      if (Platform.isAndroid) {
        await flutterLocalNotificationsPlugin.show(
          0,
          message.notification?.title,
          message.notification?.body,
          getNotificationDetails(
              message.notification!.title, message.notification!.body),
          payload: message.data['body'],
        );
      }
    });
  }

  //...................set settings in IOS to show foreground notification when app is in foreground....................//
  Future<void> showForegroundNotificationInIOS() async {
    FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
        alert: true, badge: true, sound: true);
  }

  //............................notification handler when tapped................................................//
  Future<void> notificationHandler(RemoteMessage? message) async {
    if (message == null) {
      log('Notification message is null');
    } else {
      log('Notification handler is called');
      Navigator.push(
          MyGlobalKeys.navigatorKey.currentState!.context,
          MaterialPageRoute(
            builder: (context) => const WelcomeScreen(),
          ));
    }
  }

  //.........................handle notification tap when app is opened from terminated state...................//
  Future<void> handleNotificationInAppTerminatedState() async {
    await FirebaseMessaging.instance
        .getInitialMessage()
        .then(notificationHandler);
  }

  //.........................................send push notification...................................................//
  Future<void> sendPushNotification(
      {required String title,
      required String body,
      required String payload,
      required String token}) async {
    const String fcmServerKey =
        "AAAA-d67VjA:APA91bFRPPlWugJeBytF59PppLt5PJTvFt3pMzBot28xU_LQZ-u85DObJFjZcF7Wn_q4Rzhl2CSqL8Hg71wIxJRNQptv8K8HGtYD77kzGNCS_oC2zDb71d8P3M47sPO1vfpV1Zycm10Z";
    try {
      await http.post(Uri.parse('https://fcm.googleapis.com/fcm/send'),
          headers: <String, String>{
            'Content-Type': 'application/json',
            'Authorization': 'key=$fcmServerKey'
          },
          body: jsonEncode(<String, dynamic>{
            'priority': 'high',
            'data': <String, dynamic>{
              'click_action': 'FLUTTER_NOTIFICATION_CLICK',
              'status': 'done',
              'body': payload,
              'title': title,
            },
            'notification': <String, dynamic>{
              'title': title,
              'body': body,
              'android_channel_id': 'testapp'
            },
            'to': token
          }));
    } catch (e) {
      log(e.toString());
    }
  }
}
